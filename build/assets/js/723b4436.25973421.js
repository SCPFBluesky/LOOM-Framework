"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[692],{9097:e=>{e.exports=JSON.parse('{"functions":[{"name":"GetModule","desc":"","params":[{"name":"self","desc":"The LOOM userdata.","lua_type":"any"},{"name":"Name","desc":"The moudle to get","lua_type":"string"}],"returns":[{"desc":"The requried module.","lua_type":"any?"}],"function_type":"static","tags":["Modules"],"yields":true,"source":{"line":52,"path":"src/ALPHA_build.luau"}},{"name":"GetService","desc":"Gets and returns the requried registered LOOM service.\\n\\n\\n:::danger\\nThis method will error if init isn\'t called or service is nil.\\n:::","params":[{"name":"self","desc":"The LOOM userdata.","lua_type":"any"},{"name":"Name","desc":"The requested LOOM service.","lua_type":"string"}],"returns":[{"desc":"The LOOM Service.","lua_type":"any?"}],"function_type":"static","tags":["Services"],"source":{"line":93,"path":"src/ALPHA_build.luau"}},{"name":"Init","desc":"Starts up the LOOM Services.\\n\\n:::danger\\nInit will error if it is called mutiple times.\\n:::","params":[],"returns":[],"function_type":"static","yields":true,"source":{"line":118,"path":"src/ALPHA_build.luau"}},{"name":"hookservice","desc":"Hooks a LOOM Service.\\n\\n\\n:::danger\\nThis method will error with missing parameters.\\n:::","params":[{"name":"Name","desc":"The service to hook","lua_type":"string"},{"name":"Target","desc":"The metamethod to hook","lua_type":"string"},{"name":"New","desc":"The function to re-write the metamethod with.","lua_type":"Function"}],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"static","tags":["Services"],"source":{"line":143,"path":"src/ALPHA_build.luau"}},{"name":"hookservice","desc":"","params":[{"name":"Name","desc":"","lua_type":"string"},{"name":"Target","desc":"","lua_type":"string"},{"name":"New","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"static","deprecated":{"version":"v0","desc":"Keep in note this function will be deprecated and replaced with something else."},"source":{"line":145,"path":"src/ALPHA_build.luau"}},{"name":"CreateService","desc":"Creates & Registers a new LOOM service.\\n\\n\\n\\n:::caution\\nReadOnly parameter will ONLY work in live roblox games, not studio.\\n:::","params":[{"name":"self","desc":"The LOOM userdata","lua_type":"any"},{"name":"Name","desc":"The name of the new LOOM Service","lua_type":"string"},{"name":"Closure","desc":"The functions \\\\ properties of the new LOOM Service.","lua_type":"any"},{"name":"ReadOnly","desc":"Sets the Loom service in a table.freeze and also locks the metatable. (Defaults to false)","lua_type":"boolean?"},{"name":"Type","desc":"The string to return when typeof is calle don the Service. (Defaults to \\"Instance\\")","lua_type":"string?"},{"name":"LockMessage","desc":"The message to return when getmetatable() is called on the Service (Defaults to \\"Loom Service\\")","lua_type":"string?"}],"returns":[{"desc":"The service that was just created.","lua_type":"any?"}],"function_type":"static","tags":["Services"],"source":{"line":172,"path":"src/ALPHA_build.luau"}}],"properties":[],"types":[],"name":"LOOM","desc":"The core for the LOOM framework","source":{"line":25,"path":"src/ALPHA_build.luau"}}')}}]);